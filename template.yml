---
AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  CodeLocationKey2:
    Type: "String"
Resources:
  Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: "PublicRead"
      WebsiteConfiguration:
        ErrorDocument: "index.html"
        IndexDocument: "index.html"
  BucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket:
        Ref: "Bucket"
      PolicyDocument:
        Statement:
        - Effect: "Allow"
          Action:
          - "s3:GetObject"
          Resource:
          - Fn::Join:
            - ""
            - - "arn:aws:s3:::"
              - Ref: "Bucket"
              - "/*"
          Principal: "*"
  Bucket2:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: "PublicRead"
      BucketName: "MyBucket"
      WebsiteConfiguration:
        ErrorDocument: "404.html"
        IndexDocument: "index.html"
  BucketPolicy2:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: ""
      PolicyDocument:
        Statement:
        - Effect: "Allow"
          Action:
          - "s3:GetObject"
          Resource:
          - Fn::Join:
            - ""
            - - "arn:aws:s3:::"
              - Ref: "Bucket2"
              - "/*"
          Principal: "*"
  Bucket3:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: "PublicRead"
      BucketName: "MyBucket"
      WebsiteConfiguration:
        ErrorDocument: "404.html"
        IndexDocument: "index.html"
  Bucket4:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: "PublicRead"
      BucketName: "MyBucket"
      WebsiteConfiguration:
        ErrorDocument: "404.html"
        IndexDocument: "index.html"
  Certificate:
    Type: "AWS::CertificateManager::Certificate"
    Properties:
      DomainName: "klouds.io"
      DomainValidationOptions:
      - DomainName: "klouds.io"
        ValidationDomain: "klouds.io"
      SubjectAlternativeNames:
      - "klouds.io"
      ValidationMethod: "DNS"
  Distribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Enabled: true
        Aliases:
        - Fn::Join:
          - ""
          - - "www."
            - "klouds.io"
        - "klouds.io"
        DefaultCacheBehavior:
          ForwardedValues:
            QueryString: true
          TargetOriginId: "s3Origin"
          ViewerProtocolPolicy: "allow-all"
          AllowedMethods:
          - "GET"
          - "HEAD"
          - "OPTIONS"
        DefaultRootObject: "index.html"
        HttpVersion: "http2"
        Origins:
        - DomainName:
            Fn::Join:
            - ""
            - - Ref: "Bucket4"
              - ".s3-website-"
              - Ref: "AWS::Region"
              - ".amazonaws.com"
          Id: "s3Origin"
          CustomOriginConfig:
            OriginProtocolPolicy: "http-only"
        PriceClass: "PriceClass_200"
        ViewerCertificate:
          AcmCertificateArn:
            Ref: "Certificate"
          SslSupportMethod: "sni-only"
  Bucket5:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: "PublicRead"
      BucketName: "MyBucket"
      WebsiteConfiguration:
        ErrorDocument: "404.html"
        IndexDocument: "index.html"
  Certificate2:
    Type: "AWS::CertificateManager::Certificate"
    Properties:
      DomainName: "klouds.io"
      DomainValidationOptions:
      - DomainName: "klouds.io"
        ValidationDomain: "klouds.io"
      SubjectAlternativeNames:
      - "klouds.io"
      ValidationMethod: "DNS"
  Distribution2:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Enabled: true
        Aliases:
        - Fn::Join:
          - ""
          - - "www."
            - "klouds.io"
        - "klouds.io"
        DefaultCacheBehavior:
          ForwardedValues:
            QueryString: true
          TargetOriginId: "s3Origin"
          ViewerProtocolPolicy: "allow-all"
          AllowedMethods:
          - "GET"
          - "HEAD"
          - "OPTIONS"
        DefaultRootObject: "anotherindex.html"
        HttpVersion: "http2"
        Origins:
        - DomainName:
            Fn::Join:
            - ""
            - - Ref: "Bucket5"
              - ".s3-website-"
              - Ref: "AWS::Region"
              - ".amazonaws.com"
          Id: "s3Origin"
          CustomOriginConfig:
            OriginProtocolPolicy: "http-only"
        PriceClass: "PriceClass_200"
        ViewerCertificate:
          AcmCertificateArn:
            Ref: "Certificate2"
          SslSupportMethod: "sni-only"
      Tags:
      - Key: "A"
        Value: "B"
  Bucket6:
    Type: "AWS::S3::Bucket"
  LogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: "/aws/lambda/myService-dev-myFunction2"
  Role:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: "Allow"
          Action:
          - "sts:AssumeRole"
          Principal:
            Service:
            - "lambda.amazonaws.com"
        Version: "2012-10-17"
      ManagedPolicyArns:
      - Fn::Join:
        - ""
        - - "arn:"
          - Ref: "AWS::Partition"
          - ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
      Path: "/"
      Policies:
      - PolicyDocument:
          Statement:
          - Effect: "Allow"
            Action:
            - "logs:CreateLogStream"
            Resource:
            - Fn::Join:
              - ""
              - - "arn:"
                - Ref: "AWS::Partition"
                - ":logs:"
                - Ref: "AWS::Region"
                - ":"
                - Ref: "AWS::AccountId"
                - ":log-group:/aws/lambda/myService-dev-definition:*"
          - Effect: "Allow"
            Action:
            - "logs:PutLogEvents"
            Resource:
            - Fn::Join:
              - ""
              - - "arn:"
                - Ref: "AWS::Partition"
                - ":logs:"
                - Ref: "AWS::Region"
                - ":"
                - Ref: "AWS::AccountId"
                - ":log-group:/aws/lambda/myService-dev-definition:*"
                - ":*"
          Version: "2012-10-17"
        PolicyName: "dev-myService-lambda"
      RoleName:
        Fn::Join:
        - ""
        - - "myService-dev-"
          - Ref: "AWS::Region"
          - "-lambdaRole"
  Function:
    Type: "AWS::Lambda::Function"
    DependsOn:
    - "LogGroup"
    - "Role"
    Properties:
      Code:
        S3Bucket:
          Ref: "Bucket6"
        S3Key:
          Ref: "CodeLocationKey2"
      Handler: "org.http4k.serverless.lambda.LambdaFunction::handle"
      Role:
        Ref: "Role"
      Runtime: "java8"
      Environment:
        Variables:
          HTTP4K_BOOTSTRAP_CLASS: "handler"
      Timeout: 20
  RestApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "dev-myService"
  Resource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId:
        Fn::GetAtt:
        - "RestApi"
        - "RootResourceId"
      PathPart: "/myPath"
      RestApiId:
        Ref: "RestApi"
